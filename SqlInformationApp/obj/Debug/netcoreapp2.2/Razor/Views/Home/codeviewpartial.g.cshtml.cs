#pragma checksum "C:\Users\David\Source\Repos\SQL-InfoSchema-App\SQLInformationApp\Views\Home\codeviewpartial.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6417f8fec01e30297a926e41d32df9d048de0e52"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_codeviewpartial), @"mvc.1.0.view", @"/Views/Home/codeviewpartial.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/codeviewpartial.cshtml", typeof(AspNetCore.Views_Home_codeviewpartial))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\David\Source\Repos\SQL-InfoSchema-App\SQLInformationApp\Views\_ViewImports.cshtml"
using AndersonEnterprise.SqlInformationApp;

#line default
#line hidden
#line 2 "C:\Users\David\Source\Repos\SQL-InfoSchema-App\SQLInformationApp\Views\_ViewImports.cshtml"
using AndersonEnterprise.SqlInformationApp.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6417f8fec01e30297a926e41d32df9d048de0e52", @"/Views/Home/codeviewpartial.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"40636fcf9639861a6ba24a30eac00f65ee821acb", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_codeviewpartial : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\David\Source\Repos\SQL-InfoSchema-App\SQLInformationApp\Views\Home\codeviewpartial.cshtml"
  
    var foo = 123;

#line default
#line hidden
            BeginContext(27, 2307, true);
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">SQL CodeBuilder</h1>
</div>
<br />

<div class=""row"">
    <div class=""col-12"">
        <div class=""card"">
            <h5 class=""card-header"">C# Web API Example using the <span class=""text-primary"" data-bind=""text:queryName""></span> query</h5>
            <div class=""card-body"">
                <h5 class=""card-title"">Using <a target=""_blank"" href=""https://www.nuget.org/profiles/netbiz"">AndersonEnterprise.SqlQueryService</a> NuGet package</h5>
                <pre>
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using AndersonEnterprise.SqlQueryService; <span style=""color:green"">// << get from NuGet</span>

namespace Sample.Controllers.Apis
{
    /// &lt;summary&gt;
    /// <span style=""color:green""><span data-bind=""text:queryName""></span> - web api controller for returning rows from named-query ""<text data-bind=""text:queryName""></text>""</span>
    /// &lt;/summary&gt;
    [Route(""api/[controller]"")] <span styl");
            WriteLiteral(@"e=""color:green"">//api/<span data-bind=""text:queryName""></span></span>
    public class <span data-bind=""text:queryName""></span>Controller : <strong>InfoQueryServiceController</strong>
    {
        public <span data-bind=""text:queryName""></span>Controller(IConfiguration config) : base(config) { }
        <span style=""color:green"">// set known query name ... base controller will chase it down and run it</span>
        public override string QueryName => ""<text data-bind=""text:queryName""></text>"";
    }
}
</pre>
                <p class=""text-info"">Other examples/techniques can be found in the GitHub download. Run query and see result in console.</p>
                <a data-bind=""click:runQuery"" href=""#"" class=""btn btn-sm btn-primary"">Run Query (see result in console)</a>
            </div>
        </div>
    </div>
</div>

<br />
<div class=""row"">
    <div class=""col-12"">
        <div class=""card"">
            <h5 class=""card-header"">Javascript Fetch Example</h5>
            <div class=""ca");
            WriteLiteral(@"rd-body"">
<pre>
fetch(""/api/<span data-bind=""text:queryName""></span>"", { method: 'GET' })
.then(response => { return response.json(); })
.then(jsonData => {
    console.log(jsonData);
});
</pre>
            </div>
        </div>
    </div>
</div>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
